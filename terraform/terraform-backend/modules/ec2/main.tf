# data "aws_subnet_ids" "test_subnet_ids" {
#   vpc_id = "default"
# }
# data "aws_subnet" "test_subnet" {
#   count = "${length(data.aws_subnet_ids.test_subnet_ids.ids)}"
#   id    = "${tolist(data.aws_subnet_ids.test_subnet_ids.ids)[count.index]}"
# }

# output "subnet_cidr_blocks" {
#   value = ["${data.aws_subnet.test_subnet.*.id}"]
# }

data "aws_subnets" "public_subnet" {
    count = var.create_module_ec2 ? 1 : 0

      filter {
        name   = "vpc-id"
        values = [var.vpc_id]
      }

      tags = {
        Name =  "*public*"
    }
}
resource "aws_security_group" "sg" {
  count = var.create_module_ec2 ? 1 : 0  
  name        =  "${var.name}-sg"
   vpc_id      = var.vpc_id

  dynamic "ingress" {
    for_each = var.ports
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = var.cidr_blocks
    } 
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}


resource "tls_private_key" "pk" {
  count = var.create_module_ec2 ? 1 : 0  
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "kp" {
  count = var.create_module_ec2 ? 1 : 0  
  key_name   = "${var.name}-key"    # Create a "myKey" to AWS!!
  public_key = tls_private_key.pk[0].public_key_openssh
}
resource "local_file" "ssh_key" {
  count = var.create_module_ec2 ? 1 : 0  
  filename = "${aws_key_pair.kp[0].key_name}.pem"
  content = tls_private_key.pk[0].private_key_pem
}


resource "aws_instance" "e1" {
  count = var.create_module_ec2 ? 1 : 0  
  ami           = var.ami_id
  instance_type = var.instance_type
  subnet_id     = data.aws_subnets.public_subnet[0].ids[0]
  key_name        = aws_key_pair.kp[0].key_name
  vpc_security_group_ids =  [aws_security_group.sg[0].id]

  dynamic "root_block_device" {
    for_each = var.root_block_override ? [1] : []
    content {
      delete_on_termination = var.root_block_delete_on_termination
      encrypted             = true
      iops                  = var.root_block_volume_type == "gp3" ? null : var.root_block_iops
      volume_size           = var.root_block_volume_size
      volume_type           = var.root_block_volume_type
   }
  }

  provisioner "remote-exec" {
    inline = [
      "ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -q -N ''", 
    ]

    connection {
      type        = "ssh"
      user        = "ec2-user"  # Replace with the appropriate user for your AMI
      private_key = tls_private_key.pk[0].private_key_pem  # Use the private key generated by Terraform
      host        = self.public_ip
    }
  }
  tags = merge(
    { "Name" = "${var.name}" },
    var.tags)

}
# resource "local_file" "public_key" {
#   depends_on = [aws_instance.e1]

#   filename = "${path.module}/public_key.pub"
#   content  = aws_instance.e1.provisioner["remote-exec"][1].result
# }
  


